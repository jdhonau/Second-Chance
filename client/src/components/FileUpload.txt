<template>
  <div>
    <vue3-dropzone ref="myVueDropzone" id="dropzone" class="dropzone" v-bind:options="dropzoneOptions"
      v-on:v-dropzone-sending="addFormData" v-on:v-dropzone-success="getSuccessResponse"
      v-bind:useCustomDropzoneOptions="true"></vue3-dropzone>
  </div>

  <div>
    <input type="file" multiple @change="handleFileChange" />
    <button @click="uploadFiles">Upload</button>
  </div>

  <div>
    <div v-if="state.files.length > 0" class="files">
      <div class="file-item" v-for="(file, index) in state.files" :key="index">
        <span>{{ file.name }}</span>
        <span class="delete-file" @click="handleClickDeleteFile(index)">Delete</span>
      </div>
    </div>

    <div v-else class="dropzone" v-bind="getRootProps()">
      <div class="border" :class="{
        isDragActive,
      }">
        <input v-bind="getInputProps()" />
        <p v-if="isDragActive">Drop the files here ...</p>
        <p v-else>Drag and drop files here, or Click to select files</p>
      </div>
    </div>
  </div>
</template>

<script>
// import Dropzone from 'vue3-dropzone';
import { defineEmits, reactive, watch } from 'vue'; // Ensure 'watch' is imported
import { useDropzone } from 'vue3-dropzone'; // Import useDropzone if it's part of the library

const cloudinaryName =  process.env.VUE_APP_CLOUDINARY_CLOUD_NAME;

export default {
  name: 'FileUpload',
  components: {
    // vue3Dropzone: Dropzone,
  },
  

  data() {
    return {
      dropzoneOptions: {
        url: `https://api.cloudinary.com/v1_1/${cloudinaryName}/image/upload`,
        thumbnailWidth: 250,
        thumbnailHeight: 250,
        maxFilesize: 2.0,
        acceptedFiles: ".jpg, .jpeg, .png, .gif",
        uploadMultiple: false,
        addRemoveLinks: true,
        dictDefaultMessage:
          "Drop files here to upload. </br> Alternatively, click to select a file for upload.",
      },
    };
  },
  setup() {
    const emit = defineEmits(['files-uploaded']);

    const state = reactive({
      files: [],
    });

    const { getRootProps, getInputProps, isDragActive, ...rest } = useDropzone({
      onDrop,
    });

    watch(state, () => {
      console.log('state', state);
    });

    watch(isDragActive, () => {
      console.log('isDragActive', isDragActive.value, rest);
    });

    function onDrop(acceptFiles, rejectReasons) {
      console.log(acceptFiles);
      console.log(rejectReasons);
      state.files = acceptFiles;
      emit('files-uploaded', acceptFiles); // Emit the files to the parent component
    }

    function handleClickDeleteFile(index) {
      state.files.splice(index, 1);
    }

    // Define the uploadFiles function
    function uploadFiles() {
      // Implement the logic to upload files

      console.log('Uploading files:', state.files);
      // You can use the UploadPhotoSvc here if needed
    }
    
    return {
      state,
      getRootProps,
      getInputProps,
      isDragActive,
      handleClickDeleteFile,
      uploadFiles,
    };
  },
};
</script>



<style lang="scss" scoped>
.dropzone,
.files {
  width: 100%;
  max-width: 300px;
  margin: 0 auto;
  padding: 10px;
  border-radius: 8px;
  box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px,
    rgba(60, 64, 67, 0.15) 0px 1px 3px 1px;
  font-size: 12px;
  line-height: 1.5;
}

.border {
  border: 2px dashed #ccc;
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 20px;
  transition: all 0.3s ease;
  background: #fff;

  &.isDragActive {
    border: 2px dashed #ffb300;
    background: rgb(255 167 18 / 20%);
  }
}

.file-item {
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  background: rgb(255 167 18 / 20%);
  padding: 7px;
  padding-left: 15px;
  margin-top: 10px;

  &:first-child {
    margin-top: 0;
  }

  .delete-file {
    background: red;
    color: #fff;
    padding: 5px 10px;
    border-radius: 8px;
    cursor: pointer;
  }
}
</style>
